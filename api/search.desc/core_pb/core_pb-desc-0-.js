searchState.loadedDescShard("core_pb", 0, "<code>bincode::serde::decode_from_slice</code> with …\n<code>bincode::serde::decode_from_slice</code> with …\n<code>bincode::serde::encode_to_vec</code> with …\nSystems for motor speed calculations\nSee <code>RobotName</code>, a unique identifier for each known robot\nSee <code>ThreadedSocket</code>, a simple poll-based wrapper around a …\nThe default network the robot tries to connect to\nthis message lets game server clients know that a game …\nThe default port where <code>server_pb</code> should expect to find the …\nThe default port where <code>gui_pb</code> should expect to connect to …\nGrid units per inch\nGrid units per meter\nInches per grid unit\nInches per meter\nThe maximum number of nodes in the target path sent from …\nMillimeters per grid unit\nMillimeters per inch\nThe size of the OLED display on the robot\nThe size of the OLED display on the robot\nThe default port where <code>server_pb</code> should expect to find the …\nThe default timeout period in seconds between socket …\nSystems for motor speed calculations\nA drive system with any number of omniwheels that can …\nReturns the argument unchanged.\nGiven signed motor speeds, find the angular velocity of …\nGiven signed motor speeds, find the velocity and angular …\nGet the speeds that each motor should turn for the given …\nCalls <code>U::from(self)</code>.\nA drive system with any number of omniwheels that can …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEach robot should have exactly one. Some fields are …\nConfiguration from the server that may change frequently, …\nAn instant representing the time the shared struct was …\nLogging bytes from defmt\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMotor control status, updated by motors task\nRobot’s name, to distinguish it from other robots, is …\nThe current network status, updated by network task\nThe robot’s physical characteristics\nInformation gathered by the peripherals task will be …\nAn estimation of the absolute orientation of the robot\nThe battery level of the robot, in volts\nReadings from the distance sensors, in order of angle 0, …\nIndividual IMU sensor information\nEstimated motor speeds\nUtilization percentage for the three tasks\nFunctionality that robots with motors must support\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe “main” method for the motors task\nSet PWM for the given pin\nFunctionality that robots with networking must support\nConnect to a network with the given username/password. …\nDisconnect from any active wifi network\nSee …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSee …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList information for up to <code>C</code> networks\nGet the device’s mac address\nSee …\nSee …\nThe “main” method for the network task\nReboot the microcontroller, as fully as possible\nAccept a socket that meets the requirements. Close the …\nDispose of the current socket\nIf the device is currently connected to a wifi network, …\nSee …\nFunctionality that robots with peripherals must support\nThe “main” method for the peripherals task\nWidth and height of a <code>Grid</code>.\nA 2D grid\nA <code>Grid</code> with precomputed data for faster pathfinding.\nA rectangle representing a wall.\nReturns the shortest path, if one exists, from start to …\nThe bottom right corner of the <code>Wall</code>.\nReturns the index of the given position in the …\nReturns the distance between two points, or <code>None</code> if the …\nnote that all walkable nodes might not be reachable from …\nFind the direction from the start point to the end point\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the underlying <code>Grid</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns all the walkable neighbors of the given position.\nReturn the walkable node from the nodes surrounding this …\nReturns the underlying <code>StandardGrid</code>, if one was used to …\nThe top left corner of the <code>Wall</code>.\nReturns the valid actions for the given position.\nwalkable, right, left, up, down\nValidates a <code>Grid</code>.\nReturns the positions of all walkable nodes in the grid.\nReturns whether there is a wall at a given position\nReturns the <code>Wall</code>s in the grid.\nwalls represent rectangles with top left corner at the …\nA (mostly) blank <code>Grid</code> - (1, 1) is walkable\nA special <code>Grid</code> with no internal walls\nA <code>Grid</code> where the outermost path is empty\nThe official Pacbot <code>Grid</code>\nA <code>Grid</code> with many smaller paths to practice maneuvering\nGet the <code>ComputedGrid</code> associated with this enum\nReturns the argument unchanged.\nGet a list of all available grids\nGet the default Pacbot <code>Isometry2</code> associated with this enum\nGet the <code>Grid</code> associated with this enum\nGet the rectangles (in grid coordinates) that should be …\nGet the part of the <code>Grid</code> that should actually show on the …\nCalls <code>U::from(self)</code>.\nCancel an Over the Air Programming update for a robot\nClear Over the Air Programming update history for a robot\nContinue an Over the Air Programming update for a robot\nAfter a message is received\nAfter a connection is established, but before a message is …\nA connection could not be established\nSee <code>FrequentServerToRobot</code>\nThis is sent regularly and frequently to robots via …\nSend a message to the game server\nMessages sent from <code>gui_pb</code> to <code>server_pb</code>\nSettings dictate that a connection should not be made\nRestart simulation (including rebuild)\nA button press (true) or release (false) for a simulated …\nSend a message to a robot\nThe display of a simulated robot\nThe positions of the simulated robots, to be shown in the …\nFirmware related items MUST remain first, or OTA …\nSet a robot’s target velocity (for WASD movement)\nSent from the robot peripherals task to the wifi task and …\nMessages sent from <code>server_pb</code> to <code>gui_pb</code>\nFirmware related items MUST remain first, or OTA …\nUpdate server settings\nLess frequent; includes updated server settings\nSend a message to the simulation\nMessages sent from <code>sim_pb</code> to <code>server_pb</code>\nInitiate an Over the Air Programming update for a robot\nVery frequent; includes all information about the status …\nSet a robot’s target location\nThe different async tasks that run on the robot\nThe absolute orientation of the robot, given by the IMU\nThis angle should be considered angle 0\nThe battery level of the robot\nThe grid cell the CV system thinks the robot is in\nReadings from the distance sensors, in order of angle 0, …\nWhether the robot should try to follow the target path …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhich grid is currently in use\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe best guess location of the robot\nWhich pwm pin corresponds to which motor\nRequested velocity for each individual motor, forwards (+) …\nCreate one with default parameters of the given robot\nBasic parameters for the PID controller\nRequested output for each PWM pin, for testing\nThe points the robot should try to go to\nOverall requested velocity of the robot, ex. using WASD or …\nIndicates the last completed action\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGeneric network connection settings\nGame server network options\nWASD, or right click to set target\nRarely changed options for the pacbot server\nAI\nPico network options, on-robot drive code options\nSimulation options\nNo movement\nTest (never goes back on itself)\nTest (random, uniform over all cells)\nConfiguration; see <code>FrequentServerToRobot</code>\nWhether the app should try to connect/reconnect\nNetwork details\nNetwork details\nConnection settings\nWhere the cv location comes from\nWhether the robot should try to drive the target path\nOptions for pathing, speed\nA collection of variables available in any context in …\nWhether to send extra_opts to robot\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOptions for the go server\nHost a web server for browser clients\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIP address, if it should be connected\nThe rotational speed, in rad/s, when driving with manual …\nThe translational speed, in gu/s, when driving with manual …\nWhich robot’s position should be used as the pacman …\nPort\nOptions for the robots\nWhich robots should be spawned in\nIn safe mode, only messages related to over the air …\nLaunch a fake game server and physics simulation as a …\nOptions for the simulation\nThe speed, in gu/s, to travel when the path length is 1, …\nThe maximum speed, in gu/s, when pathing autonomously\nThe speed, in gu/s, to add for each additional grid unit …\nWhich grid is current in use\nDetermines target position and path\nThe target speed of the robot in gu/s\nThe number of unique <code>RobotName</code>s\nRepresents a unique robot, either a physical device or a …\nThe default pre-filled ip - robots need not necessarily …\nReturns the argument unchanged.\nUniquely determine the robot name from the mac address, if …\nAll robot names in order\nCalls <code>U::from(self)</code>.\nWhether this robot is a raspberry pi pico\nWhether this robot is managed by the simulator\nThe mac address of this robot, must be unique\nThe port this robot will listen on for TCP connections\nThe characteristics of this robot\nA <code>Region</code> of a <code>Grid</code> is an area where moving around the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAll the information that may vary from robot to robot\nDescribes physical characteristics of the motors\nWhich pwm pin corresponds to forwards and backwards for …\nDefault PID parameters - can change\nExposes methods to calculate motor velocities\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether the robot should expect to have access to a screen\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDescribes physical characteristics of the motors\nCreate the default <code>RobotDefinition</code> for the given robot\nThe maximum value for motor PWM pins\nMaximum radius of the circle the robot fits into\nMaximum range of the sensors in meters\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nipv4 address with port number\nraw bytes\nthe type\nA TCP socket compatible with <code>ThreadedSocket</code>\ntext\nRepresents data that is either the given type, or text\nRepresents a type that is compatible with <code>ThreadedSocket</code>\nSimple poll-based wrapper around a socket (websocket or …\nRead new data from the socket (blocking await)\nQueue something to be sent to the socket (blocking await)\nSpecify an address to connect to (or None to suspend …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nClose the socket\nTry to connect to the address\nTry to read from the socket\nSend the data to the socket\nCreate a new <code>ThreadedSocket</code>\nRead new data from the socket, if it is available\nRuns on a separate thread to babysit the socket\nQueue something to be sent to the socket\nA future that yields the next message from the socket, or …\nFetch the latest information about the status of the …\nCreate a new ThreadedSocket with a name for logging\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")